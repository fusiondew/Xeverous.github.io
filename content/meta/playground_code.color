8prep_direct 0prep_hdr
8prep_direct 0prep_hdr
8prep_direct 0prep_hdr
8prep_direct 0prep_hdr
8prep_direct 0prep_hdr
8prep_direct 0prep_hdr
8prep_direct 0prep_hdr

6prep_direct macro_ref
6prep_direct macro_ref 0comm_single

keyword <keyword tparam>
keyword class : namespace::class {};

3comm_multi_dox "@brief"comm_tag_dox 0comm_single_dox
keyword alias = namespace::class<built_in, built_in, built_in, namespace::class>;

keyword <keyword... tparam>
keyword class : tparam... { keyword tparam::keyword()...; };
keyword <keyword... tparam>
func(tparam...) -> class<tparam...>;

keyword <keyword tparam>
keyword concept = keyword(tparam param)
{
	{*param} -> keyword tparam::class; 0comm_single
	0comm_single
	0comm_single
};

keyword <concept tparam, keyword... tparam> keyword
keyword(keyword) func(tparam&& param, tparam&&... param) 0comm_single
{
	keyword namespace::func<tparam>(param)(namespace::class<tparam>(param)...);
}

keyword <keyword tparam, namespace::alias... tparam> keyword
built_in func(tparam&& param, namespace::class<tparam...>)
{
	keyword !((namespace::func<tparam + num>(namespace::func<tparam>(param)) < namespace::func<tparam>(namespace::func<tparam>(param))) && ...);
}

keyword <concept... tparam> keyword
built_in func(tparam&&... param)
{
	keyword keyword (keyword...(tparam) <= num1$)
		keyword keyword;
	keyword "///"comm_single_dox "@note"comm_tag_dox 0comm_single_dox
		keyword func(namespace::func(namespace::func<tparam>(param)...), namespace::class<keyword...(tparam) - num>{});
}

built_in func()
{
	namespace::class<alias> var_local = {num, num1$, num, string};

	keyword (keyword& var_local : var_local)
	{
		0comm_single
		namespace::func([](keyword&& param) { namespace::var_static << param; }, var_local);

		0comm_single
		var_local = namespace::func([](keyword&& param) -> alias { keyword param + param; }, var_local);

		namespace::var_static << string;

		0comm_single
		namespace::func([](keyword&& param)
		{
			keyword alias = namespace::class<keyword(param)>;

			keyword keyword (namespace::class<alias, built_in>)
				namespace::namespace::func(string, param);
			keyword keyword keyword (namespace::class<alias, built_in>)
				namespace::namespace::func(string, param);
			keyword keyword keyword (namespace::class<alias, built_in>)
				namespace::namespace::func(string, param);
			keyword keyword keyword (namespace::class<alias, namespace::class>)
				namespace::namespace::func(string, param);
			keyword
				keyword(class<alias>::var_local, string);
		}, var_local);
	}

	keyword (keyword keyword& var_local : var_local)
	{
		namespace::func(class {
			[](keyword param) { namespace::var_static 2op_ol param 2op_ol chars; },
			[](keyword param) { namespace::var_static 2op_ol namespace::func 2op_ol param 2op_ol chars; },
			[](keyword namespace::class& param) { namespace::var_static 2op_ol namespace::func(param) 2op_ol chars; }
		}, var_local);
	}
}