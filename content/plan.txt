# Brief plan of the core language tutorial. Expect it to be changed very often while building the site

preparation
	what is C++ (language types: static/dynamic typing, memory mamanegement, build, etc)
	terms (IDE, compiler, etc),
	build configurations
	common configuration problems
	history
	hello world

basics
	brief: syntax: comments, whitespace, naming rules, non-context-free grammar
	brief: hello world explanation
	brief: std::cout
	brief: main function
	brief: preprocessor

preprocessor
	include
	define
	ifdef
	error (mention warning extension)
	pragma
	line
	pre-defined macros

type fundamentals
	built-in types
		integers
		characters
		boolean
		floating-point
		void
		literals
		brief: sizeof operator
	brief: custom types (struct, enums)

program structure
	assignments
	comments
	variables, scoping
	const
	std::cout
	std::cin

operators
	terms
	arithmetics
	increment, decrement
	comparisons - mention floating-point comparisons
	logical operators (logic gates, link numberphile vid) (+DeMorgans law)
	bitwise operators (shifts etc)

control flow
	brief: control flow, why not just jumps
	goto
	if
	switch
	while
	for
	loop control (break, continue)

pointers
	arrays
	nested arrays
	pointers
	null pointers
	const
	pointers and arrays
	string literals
	void pointers

references
	lvalue vs rvalue (the simpler form)
	lvalue references
	rvalue references
	
functions
	syntax
	void return type
	declarations
	recursion
	overloading
	default arguments
	returns (return by reference, static variables, return multiple values)
	function pointers
	ellipsis

dynamic memory
	theory
	malloc, free
	operator new, operator delete
	brief: RAII

OOP
	[x] introduction
	[x] classes, encapsulation
	[x] member functions (+accessors)
	[x] constructors (+member init list, +delegating ctors), destructors
	[x] this
	[x] const members (variables, functions)
	[x] mutable member variables
	[x] static member variables
	[x] static member functions
	[x] friends
	nested types

RAII
	copy ctor vs move ctor
	shallow vs deep copying
	STL containers
	std::unique_ptr
	std::shared_ptr
	std::weak_ptr (+circular dependency)
	std::string

operator overloading
	core rules (creating operators, short-circuit, sequencing, member/free)
	binary + - * / %
	binary += -= *= /= %=
	binary ^ & |, binary ^= &= |=
	binary << >>, binary <<= >>=
	unary + -
	unary ++ --
?	binary = - move semantics where?
	2way comparisons: == != < > <= >=
	3way comparisons: <=> and equality/ordering types
	binary && ||, binary ,
	unary -> ->*
	unary []
	N-ary ()
	unary ""
	custom convertions + explicit keyword, unary ! ~
	new / delete

inheritance
	public / protected / private inheritance
	order of construction
	delegating construction to parents
	derived, inherited functions
	shadowing inherited functions
	inherited overloads (+usings)
	multiple inheritance
	virtual inheritance

polymorphism
	[x] base class pointers
	[x] virtual functions
	[x] override, final
	[x] covariant return type
	[x] virtual destructors
	virtual assignment
	early binding vs late binding
	[x] virtual table implementation
	[x] ABC, pure virtual functions
	[x] interfaces
	virtual base classes
	object slicing
	dynamic_cast vs static_cast
	RTTI
	[x] polymorphic operator<<

lambda expressions
	intro: higher order functions
	leading vs trailing return type
	catch by value/reference
	mutable lambdas
	generic lambdas
	constexpr lambdas
	templated lambdas

exceptions
	[x] intro: error handling methods (return, out code, expected, exceptions)
	[x] throw and catch
	[x] stack unwinding
	[ ] uncaught exceptions
	[x] catch(...)
	[x] exception specifiers
	[x] noexcept
	[x] exception classes
	[x] rethrowing exceptions
	[x] function try blocks
	[x] exception downsides and the future of them in C++

miscellaneous
	alignas, alignof
	volatile
	attributes
	contracts
	asm
	decltype
	future directions (concurrency, modules)
	digraphs
	trigraphs

missing
	overflow
	underflow
	implcit convertions
	converting constructors
	overloading the assignment operator
	more OO syntax examples (something like (A() + B()).func().f2())
	static virtual
	static_assert
	Object relationships
	Container classes
	std::initializer_list
	header/source separation
	"\n" after every output line
	delete this
	nested classes, anonymous classes/namespaces
	access specifiers apply to names only (aliases example)
	vector, vector of references
	function pointers, void pointers and member pointers are not compatible
	multiple inheritance - multiple vtable pointers
	function type vs function signature
	rule of 3/5/0
	
**articles which do not have title (below layout) are considered unfinished**

cheatsheet - header/source (keywords, syntax)
cheatsheet - operator overloading
	operator - arity - example expression - overloading (can not/should member/should non-mmeber/must member) - syntax example - notes (specific return, losing short-circuit)

inheritance should be after smart pointers + data structures - reason - examples, need vector and string

	out parameters should be last, avoid pointers

traps
	default arguments in virtual functions
	rvalue to lvalue reference

articles
	C pitfals
		null-terminated strings
		errno
		qsort()
		
learncpp problems
	NULL
	*/& alignment
	const-qualified member function, really everywhere
	14.3 - sqrt from cmath
	14.5 - "deriving your class from std::exception" - example does not compile (const issues)
	
pygments test
	// text \
	this text is also a part of the comment
	
	/* text1 /* text2 */ text3 */ (multi-lien commens can not be nested)
	
	`x   +y` (cuts spaces)